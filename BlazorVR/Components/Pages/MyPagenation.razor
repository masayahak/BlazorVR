@page "/pagenation"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IWeatherService WeatherService
@inject IJSRuntime JSRuntime
@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<h3>Pagenation</h3>
<p>応答時間: @responseTime.TotalMilliseconds ms</p>

<QuickGrid Items="weathers.AsQueryable()" TGridItem="Weather" Pagination="@pagination">
    <PropertyColumn Property="@(p => p.No)" Sortable="true" Class="td"/>
    <PropertyColumn Property="@(p => p.Date)" Format="yyyy/MM/dd" Title="日付" />
    <PropertyColumn Property="@(p => p.TemperatureC)" Title="温度℃" />
    <PropertyColumn Property="@(p => p.Summary)" Title="概要" />
</QuickGrid>

<Paginator State="@pagination" />


@code {
    List<Weather> weathers = new List<Weather>();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private long serverStartTime;
    private long clientRenderTime;
    private TimeSpan responseTime;

    private bool isResponseTimeRecorded = false;

    protected override async Task OnInitializedAsync()
    {
        serverStartTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        weathers = await WeatherService.GetAllWeathers();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isResponseTimeRecorded && weathers.Count > 0)
        {
            // クライアント側の描画完了時刻を取得
            clientRenderTime = await JSRuntime.InvokeAsync<long>("getClientRenderTime");
            responseTime = TimeSpan.FromMilliseconds(clientRenderTime - serverStartTime);
            isResponseTimeRecorded = true;
            StateHasChanged(); // 応答時間を表示するために再描画をトリガー
        }
    }
}
